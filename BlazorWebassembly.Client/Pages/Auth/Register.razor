@page "/auth/register"
@using Shop.Shared.Auth
@using Shop.Shared.Services.AuthService

 @inject IAuthService AuthService
 @inject NavigationManager NavigationManager

<EditForm Model="userRegisterDto" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="Email">Email</label>
        <InputText id="Email" class="form-control" @bind-Value="userRegisterDto.Email" />
        <ValidationMessage For="@(() => userRegisterDto.Email)" />
     </div>


    <div class="form-group">
        <label for="userName">User name</label>
        <InputText id="userName" class="form-control" @bind-Value="userRegisterDto.UserName" />
        <ValidationMessage For="@(() => userRegisterDto.UserName)" />
    </div>

     <div class="form-group">
        <label for="Password">Password</label>
        <InputText id="Password" class="form-control" @bind-Value="userRegisterDto.Password" />
        <ValidationMessage For="@(() => userRegisterDto.Password)" />
      </div>

    <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <InputText id="confirmPassword" type="password" class="form-control" @bind-Value="userRegisterDto.ConfirmPassword" />
        <ValidationMessage For="@(() => userRegisterDto.ConfirmPassword)" />
    </div>

    <button type="submit" class="btn btn-primary">Register</button>
</EditForm>

@if(errorMessage != null)
{
    <div class="alert alert-danger" role="alert">
        @errorMessage
    </div>
}


@code {
    private UserRegisterDto userRegisterDto = new UserRegisterDto();
    string errorMessage { get; set; } = null;
    private async Task HandleRegister()
    {
        var result = await AuthService.Register(userRegisterDto);
        if (result.Success)
        {
            NavigationManager.NavigateTo("/auth/login");
        }
        else
        {
            errorMessage = result.Message;
        }
    }
}
