@page "/products/newProductsList"

@inject IProductService ProductService
@inject NavigationManager NavigationManager

<h3>ProductsList</h3>

<p>
    <NavLink href="/products/addProduct" class="btn btn-primary">Add Product</NavLink>
</p>

@if (products == null)
{
    <p>@message</p>
}
else
{
    <div>
        <table class="table">
            <thead>
                <tr>
                    <th @onclick='() => ChangeSort("Id")'>Product Id</th>
                    <th @onclick='() => ChangeSort("Title")'>Product Name</th>
                    <th @onclick='() => ChangeSort("Price")'>Product Price</th>
                    <th @onclick='() => ChangeSort("Barcode")'>Barcode</th>
                    <th @onclick='() => ChangeSort("ReleaseDate")'>Release Date</th>
                    <th>
                        <button class="btn btn-secondary" @onclick="ToggleFilterVisibility">
                            Filter
                        </button>
                    </th>
                </tr>
            </thead>
            <tbody>
                @if (filtersVisible)
                {
                    <tr>
                        <th><InputText class="form-control" @bind-Value="filterId" placeholder="Filter by Id" /></th>
                        <th><InputText class="form-control" @bind-Value="filterTitle" placeholder="Filter by Title" /></th>
                        <th><InputText class="form-control" @bind-Value="filterPrice" placeholder="Filter by Price" /></th>
                        <th><InputText class="form-control" @bind-Value="filterBarcode" placeholder="Filter by Barcode" /></th>
                        <th><InputText class="form-control" @bind-Value="filterReleaseDate" placeholder="Filter by Release Date" /></th>
                        <th><button class="btn btn-primary" @onclick="Search">Search</button></th>
                    </tr>
                }
                @foreach (var product in products)
                {
                    <tr>
                        <td>@product.Id</td>
                        <td>@product.Title</td>
                        <td>@product.Price</td>
                        <td>@product.Barcode</td>
                        <td>@product.ReleaseDate.ToShortDateString()</td>
                        <td>
                            <button class="btn btn-primary" @onclick="()=>GoToEditProduct(product.Id)">Edit</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>


        <button class="btn btn-primary" @onclick="Previous">Previous</button>
        <span>@currentPage</span>
        <button class="btn btn-primary" @onclick="Next">Next</button>
    </div>
}

@code {
    private bool filtersVisible = false;

    private void ToggleFilterVisibility()
    {
        filtersVisible = !filtersVisible;
    }
    private List<Product> products;
    private string message = "Loading...";
    private string filterId = string.Empty;
    private string filterTitle = string.Empty;
    private string filterPrice = string.Empty;
    private string filterBarcode = string.Empty;
    private string filterReleaseDate = string.Empty;

    private int currentPage = 1;
    private int pageSize = 10;

    private string sortColumn = "Id";
    private bool sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        await LoadProducts();
    }

    private async Task LoadProducts()
    {
        var response = await ProductService.SearchProductsAsync(null, 1, 10);
        if (response.Success)
        {
            products = response.Data;
            SortProducts();
        }
        else
        {
            message = response.Message;
        }
    }

    private void SortProducts()
    {
        if (sortAscending)
        {
            products = products.OrderBy(p => GetPropertyValue(p, sortColumn)).ToList();
        }
        else
        {
            products = products.OrderByDescending(p => GetPropertyValue(p, sortColumn)).ToList();
        }
    }

    private void ChangeSort(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
        SortProducts();
    }

    private object GetPropertyValue(Product product, string propertyName)
    {
        return typeof(Product).GetProperty(propertyName).GetValue(product, null);
    }

    private void GoToEditProduct(int productId)
    {
        NavigationManager.NavigateTo($"/products/editProduct/{productId}");
    }

    private async Task Search()
    {
        var filterParams = new FilterParams
            {
                Id = filterId,
                Title = filterTitle,
                Price = filterPrice,
                Barcode = filterBarcode,
                ReleaseDate = filterReleaseDate,
                //Description = "", // nie wyswietlamy go na ui 
            };

        var response = await ProductService.FilterProductsAsync(filterParams, currentPage, pageSize);
        if (response.Success)
        {
            products = response.Data;
        }
        else
        {
            message = response.Message;
        }
    }

    private async Task Next()
    {
        currentPage++;
        await Search();
    }

    private async Task Previous()
    {
        currentPage--;
        await Search();
    }


}
