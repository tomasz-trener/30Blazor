@page "/products/productsList"

@inject IProductService ProductService
@inject NavigationManager NavigationManager

<h3>ProductsList</h3>

<p>
   @*  <a href="/products/addProduct">Add Product</a> *@
    <NavLink href="/products/addProduct" class="btn btn-primary">Add Product</NavLink>
</p>

@if (products == null)
{
    <p>@message</p>
}
else
{
    <div>
        @* <input type="text" class="form-control" placeholder="Search" @bind="searchTerm" /> *@
        <InputText class="form-control" placeholder="Search" @bind-Value="searchTerm" />
        <button class="btn btn-primary" @onclick="Search">Search</button>
    </div>


    <table class="table">
        <thead>
            <tr>
                <th @onclick='() => ChangeSort("Id")'>Product Id</th>
                <th @onclick='() => ChangeSort("Title")'>Product Name</th>
                <th @onclick='() => ChangeSort("Price")'>Product Price</th>
                <th @onclick='() => ChangeSort("Barcode")'>Barcode</th>
                <th @onclick='() => ChangeSort("ReleaseDate")'>Release Date</th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Title</td>
                    <td>@product.Price</td>
                    <td>@product.Barcode</td>
                    <td>@product.ReleaseDate.ToShortDateString()</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=>GoToEditProduct(product.Id)">Edit</button>
                        <button class="btn btn-primary" @onclick="()=>DeleteProduct(product.Id)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <button class="btn btn-primary" @onclick="Previous">Previous</button>
    <span>@currentPage</span>
    <button class="btn btn-primary" @onclick="Next">Next</button>

}


@code {

    private List<Product> products;
    private string message = "Loading...";

    private string searchTerm = string.Empty;
    private int currentPage = 1;
    private int pageSize = 10;

    private string sortColumn = "Id";
    private bool sortAscending = true;

    protected override async Task OnInitializedAsync()
    {
        // products = new List<Product>()
        // {
        //     new Product { Id = 1, Title = "Product 1", Price = 100 },
        // };
        await LoadProducts();
    }

    private void GoToEditProduct(int productId)
    {
        NavigationManager.NavigateTo($"/products/editProduct/{productId}");
        
    }
    private async Task DeleteProduct(int productId)
    {
        var response = await ProductService.DeleteProductAsync(productId);
        if (response.Success)
        {
            await LoadProducts();
        }
        else
        {
            products = null;
            message = response.Message;
        }
    }

    private async Task LoadProducts()
    {
        // products = await Http.GetFromJsonAsync<List<Product>>("api/products");
        //var reponse = await ProductService.GetProductsAsync();
        var reponse = await ProductService.SearchProductsAsync(null, 1, 10);
        if (reponse.Success)
        {
            products = reponse.Data;
        }
        else
        {
            message = reponse.Message;
        }
    }

    private async Task Search()
    {
        var response = await ProductService.SearchProductsAsync(searchTerm, currentPage, pageSize);
        if (response.Success)
        {
            products = response.Data;
        }
        else
        {
            message = response.Message;
        }
    }

    private async Task Next()
    {
        currentPage++;
        await Search();
    }

    private async Task Previous()
    {
        if (currentPage > 1)
        {
            currentPage--;
            await Search();
        }
    }
    // private void ChangeSort(string columnName)
    // {
    //     if (columnName == "Title")
    //     {
    //         products = products.OrderBy(p => p.Title).ToList();
    //     }
    //     else if (columnName == "Price")
    //     {
    //         products = products.OrderBy(p => p.Price).ToList();
    //     }
    //     else if (columnName == "Barcode")
    //     {
    //         products = products.OrderBy(p => p.Barcode).ToList();
    //     }
    //     else if (columnName == "ReleaseDate")
    //     {
    //         products = products.OrderBy(p => p.ReleaseDate).ToList();
    //     }
    // }

    private void ChangeSort(string column)
    {
        if (sortColumn == column)
        {
            sortAscending = !sortAscending;
        }
        else
        {
            sortColumn = column;
            sortAscending = true;
        }
        SortProducts();
    }

    private void SortProducts()
    {
        if (sortAscending)
        {
            products = products.OrderBy(p => GetPropertyValue(p, sortColumn)).ToList();
        }
        else
        {
            products = products.OrderByDescending(p => GetPropertyValue(p, sortColumn)).ToList();
        }
    }

    private object GetPropertyValue(Product product, string propertyName)
    {
        return typeof(Product).GetProperty(propertyName).GetValue(product, null);
    }

}
