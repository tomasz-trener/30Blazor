@page "/products/productsList"

@inject IProductService ProductService
@inject NavigationManager NavigationManager

<h3>ProductsList</h3>

<p>
   @*  <a href="/products/addProduct">Add Product</a> *@
    <NavLink href="/products/addProduct" class="btn btn-primary">Add Product</NavLink>
</p>

@if (products == null)
{
    <p>@message</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Id</th>
                <th>Product Name</th>
                <th>Product Price</th>
                <th>Barcode</th>
                <th>Release date</th>
                <th>Options</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products)
            {
                <tr>
                    <td>@product.Id</td>
                    <td>@product.Title</td>
                    <td>@product.Price</td>
                    <td>@product.Barcode</td>
                    <td>@product.ReleaseDate.ToShortDateString()</td>
                    <td><button class="btn btn-primary" @onclick="()=>GoToEditProduct(product.Id)">Edit</button></td>
                </tr>
            }
        </tbody>
    </table>

}


@code {

    private List<Product> products;
    private string message = "Loading...";
    protected override async Task OnInitializedAsync()
    {
        // products = new List<Product>()
        // {
        //     new Product { Id = 1, Title = "Product 1", Price = 100 },
        // };
        await LoadProducts();
    }

    private void GoToEditProduct(int productId)
    {
        NavigationManager.NavigateTo($"/products/editProduct/{productId}");
    }

    private async Task LoadProducts()
    {
        // products = await Http.GetFromJsonAsync<List<Product>>("api/products");
        var reponse = await ProductService.GetProductsAsync();
        if (reponse.Success)
        {
            products = reponse.Data;
        }
        else
        {
            message = reponse.Message;
        }
    }
}
